apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'com.google.gms.google-services'
apply plugin: "com.vanniktech.android.junit.jacoco"
apply plugin: "org.sonarqube"
apply plugin: "androidx.navigation.safeargs.kotlin"
apply plugin: 'com.google.protobuf'

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.3"

    defaultConfig {
        applicationId "org.covidwatch.android"
        minSdkVersion 23
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        resValue("string", "safetynet_api_key", "AIzaSyDvdHktRzkayQC3JIt0rKyAtnWuhcMjOb4")
        buildConfigField("String", "SERVER_UPLOAD_ENDPOINT", '"https://exposure-2sav64smma-uc.a.run.app"')
        buildConfigField("String", "SERVER_DOWNLOAD_ENDPOINT", '"https://storage.googleapis.com/exposure-notification-export-ibznj"')
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            testCoverageEnabled false
            buildConfigField("boolean", "FIREBASE_DEBUGGING", "false")
            signingConfig signingConfigs.debug
        }
        debug {
            applicationIdSuffix = ".debug"
            testCoverageEnabled project.hasProperty('coverage')
            buildConfigField "boolean", "FIREBASE_DEBUGGING", "true"
        }
    }

    flavorDimensions "releaseChannel"

    productFlavors {
        calibration {
            dimension "releaseChannel"
            applicationIdSuffix ".calibration"
        }
        production {
            dimension "releaseChannel"
        }
    }

    buildFeatures {
        viewBinding = true
        dataBinding = true
    }

    sourceSets {
        main {
            proto {
                srcDir 'src/calibration/java/org/covidwatch/android/exposurenotification/proto'
            }
        }
    }

    compileOptions {
        coreLibraryDesugaringEnabled true

        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = "1.8"
    }

    testOptions {
        animationsDisabled = true
        unitTests.all {
            useJUnitPlatform()
            testLogging {
                events "passed", "skipped", "failed", "standardOut", "standardError"
            }

        }

    }

    junitJacoco {
        jacocoVersion = '0.8.5' // type String
        ignoreProjects = [] // type String array
        excludes // type String List
        includeNoLocationClasses = false // type boolean
        includeInstrumentationCoverageInMergedReport = false // type boolean
    }

    lintOptions {
        abortOnError false
    }
}

protobuf {
    protoc {
        artifact = 'com.google.protobuf:protoc:3.12.3'
    }
    generateProtoTasks {
        all().each { task ->
            task.builtins {
                java {}
            }
        }
    }
}

dependencies {
    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:1.0.5'

    implementation fileTree(dir: 'libs', include: ['*.jar', '*.aar'])
    implementation 'com.google.android.gms:play-services-tasks:17.1.0'
    implementation 'com.google.android.gms:play-services-base:17.3.0'
    implementation 'com.google.android.gms:play-services-basement:17.3.0'
    implementation 'com.google.android.gms:play-services-safetynet:17.0.0'

    calibrationImplementation 'com.google.protobuf:protobuf-java:3.12.2'

    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"

    implementation "androidx.appcompat:appcompat:1.1.0"
    implementation "androidx.core:core-ktx:1.3.0"
    implementation "androidx.constraintlayout:constraintlayout:1.1.3"
    implementation "androidx.paging:paging-runtime-ktx:2.1.2"
    implementation "androidx.swiperefreshlayout:swiperefreshlayout:1.0.0"
    implementation "androidx.fragment:fragment-ktx:1.2.4"
    implementation "androidx.work:work-runtime-ktx:2.3.4"
    // Google Analytics dependency.
    debugImplementation 'com.google.firebase:firebase-analytics:17.4.3'
    // Firebase Crashlytics dependency.

    def nav_version = "2.2.2"
    implementation "androidx.navigation:navigation-fragment:$nav_version"
    implementation "androidx.navigation:navigation-ui:$nav_version"
    implementation "androidx.navigation:navigation-fragment-ktx:$nav_version"
    implementation "androidx.navigation:navigation-ui-ktx:$nav_version"

    def lifecycle_version = "2.3.0-alpha03"
    implementation "androidx.lifecycle:lifecycle-runtime:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-common-java8:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_version"

    implementation "com.squareup.okhttp3:okhttp:4.7.2"
    implementation "com.squareup.okhttp3:logging-interceptor:4.7.2"

    def room_version = "2.2.5"
    implementation "androidx.room:room-runtime:$room_version"
    implementation "androidx.room:room-ktx:$room_version"
    kapt "androidx.room:room-compiler:$room_version"

    implementation "com.google.android.material:material:1.1.0"

    // TODO: Get rid of guava? Unless this is a dependency that fixes conflict between other
    // dependencies that use guava
    implementation "com.google.guava:guava:29.0-android"

    implementation "pub.devrel:easypermissions:3.0.0"

    def koin_version = "2.1.5"
    implementation "org.koin:koin-android:$koin_version"
    implementation "org.koin:koin-androidx-viewmodel:$koin_version"

    implementation 'com.google.code.gson:gson:2.8.6'
    implementation 'com.jakewharton.timber:timber:4.7.1'
    implementation 'me.tatarka.bindingcollectionadapter2:bindingcollectionadapter:4.0.0'
    implementation 'me.tatarka.bindingcollectionadapter2:bindingcollectionadapter-recyclerview:4.0.0'

    //// TEST RELATED DEPENDENCIES

    // Junit5 for Unit Tests
    testImplementation "org.junit.jupiter:junit-jupiter-api:5.6.2"

    // Junit5 Parameterized tests
    testImplementation "org.junit.jupiter:junit-jupiter-params:5.6.2"

    // Junit5 Run time
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:5.6.2"

    // AssertJ for Assertions
    testImplementation "org.assertj:assertj-core:3.11.1"

    // AndroidX Testing Core library
    androidTestImplementation "androidx.test:core:1.2.0"

    // AndroidJUnitRunner and JUnit Rules
    androidTestImplementation "androidx.test:runner:1.2.0"
    androidTestImplementation "androidx.test:rules:1.2.0"

    // Assertions
    androidTestImplementation "androidx.test.ext:junit:1.1.1"
    androidTestImplementation "androidx.test.ext:truth:1.2.0"
    androidTestImplementation "com.google.truth:truth:1.0.1"

    // Espresso dependencies
    androidTestImplementation "androidx.test.espresso:espresso-core:3.2.0"

    // Fragment testing
    def fragment_testing_version = "1.2.4"
    debugImplementation "androidx.fragment:fragment-testing:$fragment_testing_version"

}