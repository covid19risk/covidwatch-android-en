plugins {
    id 'com.gladed.androidgitversion' version '0.4.13'
}
apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: "com.vanniktech.android.junit.jacoco"
apply plugin: "org.sonarqube"
apply plugin: "androidx.navigation.safeargs.kotlin"
apply plugin: 'com.google.protobuf'
apply plugin: 'com.gladed.androidgitversion'

apply plugin: 'com.google.firebase.crashlytics'

androidGitVersion {
    codeFormat 'MNNPPP'
}

android {
    compileSdkVersion 30
    buildToolsVersion "30.0.0"

    defaultConfig {
        applicationId "org.covidwatch.android"
        minSdkVersion 23
        targetSdkVersion 30
        versionCode androidGitVersion.code()
        versionName androidGitVersion.name()

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

    }

    signingConfigs {
        debug {
            storeFile file("../debug.keystore")
            keyAlias "androiddebugkey"
            keyPassword "android"
            storePassword "android"
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true

            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            testCoverageEnabled false
            signingConfig signingConfigs.debug
        }
        debug {
            testCoverageEnabled project.hasProperty('coverage')
        }
    }

    flavorDimensions "releaseChannel", "client"

    productFlavors {
        calibration {
            dimension "releaseChannel"

            buildConfigField "long", "EXPOSURE_CHECKS_PERIOD", "1"

            def localPropertiesFile = rootProject.file("debug.properties")
            def localProperties = new Properties()

            if (localPropertiesFile.canRead()) {
                localProperties.load(new FileInputStream(localPropertiesFile))
            }

            def verification_api_key = project.hasProperty('VERIFICATION_API_KEY') ? project.getProperty('VERIFICATION_API_KEY') : localProperties["VERIFICATION_API_KEY"]
            def server_verification_endpoint = project.hasProperty('SERVER_VERIFICATION_ENDPOINT') ? project.getProperty('SERVER_VERIFICATION_ENDPOINT') : localProperties["SERVER_VERIFICATION_ENDPOINT"]
            def server_upload_endpoint = project.hasProperty('SERVER_UPLOAD_ENDPOINT') ? project.getProperty('SERVER_UPLOAD_ENDPOINT') : localProperties["SERVER_UPLOAD_ENDPOINT"]
            def server_download_endpoint = project.hasProperty('SERVER_DOWNLOAD_ENDPOINT') ? project.getProperty('SERVER_DOWNLOAD_ENDPOINT') : localProperties["SERVER_DOWNLOAD_ENDPOINT"]

            resValue("string", "verification_api_key", verification_api_key)
            resValue("string", "server_verification_endpoint", server_verification_endpoint)
            resValue("string", "server_upload_endpoint", server_upload_endpoint)
            resValue("string", "server_download_endpoint", server_download_endpoint)
        }

        production {
            dimension "releaseChannel"
            buildConfigField "long", "EXPOSURE_CHECKS_PERIOD", "6"

            def localPropertiesFile = rootProject.file("release.properties")
            def localProperties = new Properties()

            if (localPropertiesFile.canRead()) {
                localProperties.load(new FileInputStream(localPropertiesFile))
            }

            def verification_api_key = project.hasProperty('VERIFICATION_API_KEY') ? project.getProperty('VERIFICATION_API_KEY') : localProperties["VERIFICATION_API_KEY"]
            def server_verification_endpoint = project.hasProperty('SERVER_VERIFICATION_ENDPOINT') ? project.getProperty('SERVER_VERIFICATION_ENDPOINT') : localProperties["SERVER_VERIFICATION_ENDPOINT"]
            def server_upload_endpoint = project.hasProperty('SERVER_UPLOAD_ENDPOINT') ? project.getProperty('SERVER_UPLOAD_ENDPOINT') : localProperties["SERVER_UPLOAD_ENDPOINT"]
            def server_download_endpoint = project.hasProperty('SERVER_DOWNLOAD_ENDPOINT') ? project.getProperty('SERVER_DOWNLOAD_ENDPOINT') : localProperties["SERVER_DOWNLOAD_ENDPOINT"]

            resValue("string", "verification_api_key", verification_api_key)
            resValue("string", "server_verification_endpoint", server_verification_endpoint)
            resValue("string", "server_upload_endpoint", server_upload_endpoint)
            resValue("string", "server_download_endpoint", server_download_endpoint)
        }

        arizona {
            dimension "client"
            applicationId "gov.azdhs.covidwatch.android"
        }

        global {
            dimension "client"
            applicationId "org.covidwatch.main.android"
        }
    }

    applicationVariants.all { variant ->
        def variantName = variant.getName()
        // Upload mapping only with calibration release builds
        if (variantName.startsWith("calibration") && variantName.endsWith("Release")) {
            firebaseCrashlytics {
                mappingFileUploadEnabled true
            }
        } else {
            firebaseCrashlytics {
                mappingFileUploadEnabled false
            }
        }

        if (variantName.startsWith("calibrationArizona")) {
            buildConfigField "String", "REGIONS_JSON", '"https://storage.googleapis.com/dev-covid-watch-arizona-regions/arizona-v4.json"'
        } else if (variantName.startsWith("productionArizona")) {
            buildConfigField "String", "REGIONS_JSON", '"https://storage.googleapis.com/covid-watch-arizona-regions/arizona-v4.json"'
        }

        if (variantName.startsWith("calibrationGlobal")) {
            buildConfigField "String", "REGIONS_JSON", '"https://storage.googleapis.com/dev-covid-watch-main-regions/main-v4.json"'
        } else if (variantName.startsWith("productionGlobal")) {
            buildConfigField "String", "REGIONS_JSON", '"https://storage.googleapis.com/dev-covid-watch-main-regions/main-v4.json"'
        }
    }

    buildFeatures {
        viewBinding = true
        dataBinding = true
    }

    sourceSets {
        calibration {
            proto {
                srcDir 'src/calibration/java/org/covidwatch/android/exposurenotification/proto'
            }
        }
    }

    compileOptions {
        coreLibraryDesugaringEnabled true

        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = "1.8"
    }

    testOptions {
        unitTests.returnDefaultValues = true
        animationsDisabled = true
        unitTests.all {
            useJUnitPlatform()
            testLogging {
                events "passed", "skipped", "failed", "standardOut", "standardError"
            }

        }

    }

    junitJacoco {
        jacocoVersion = '0.8.5' // type String
        ignoreProjects = [] // type String array
        excludes // type String List
        includeNoLocationClasses = false // type boolean
        includeInstrumentationCoverageInMergedReport = false // type boolean
    }

    lintOptions {
        abortOnError false
    }
}

protobuf {
    protoc {
        artifact = 'com.google.protobuf:protoc:3.12.3'
    }
    generateProtoTasks {
        all().each { task ->
            task.builtins {
                java {}
            }
        }
    }
}

dependencies {
    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:1.0.10'

    implementation fileTree(dir: 'libs', include: ['*.jar', '*.aar'])
    implementation 'com.google.android.gms:play-services-tasks:17.2.0'
    implementation 'com.google.android.gms:play-services-base:17.4.0'
    implementation 'com.google.android.gms:play-services-basement:17.4.0'
    implementation 'com.google.android.gms:play-services-safetynet:17.0.0'

    calibrationImplementation 'com.google.protobuf:protobuf-java:3.12.2'
    calibrationImplementation 'com.jaredrummler:android-device-names:2.0.0'
    calibrationImplementation 'com.google.firebase:firebase-crashlytics:17.2.1'

    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"

    implementation "androidx.appcompat:appcompat:1.2.0"
    implementation "androidx.core:core-ktx:1.3.1"
    implementation "androidx.constraintlayout:constraintlayout:2.0.1"
    implementation "androidx.fragment:fragment-ktx:1.2.5"
    implementation "androidx.work:work-runtime-ktx:2.4.0"

    def nav_version = "2.3.0"
    implementation "androidx.navigation:navigation-fragment:$nav_version"
    implementation "androidx.navigation:navigation-ui:$nav_version"
    implementation "androidx.navigation:navigation-fragment-ktx:$nav_version"
    implementation "androidx.navigation:navigation-ui-ktx:$nav_version"

    def lifecycle_version = "2.3.0-alpha07"
    implementation "androidx.lifecycle:lifecycle-runtime:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-common-java8:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-viewmodel-savedstate:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_version"

    implementation "com.squareup.okhttp3:okhttp:4.7.2"
    implementation "com.squareup.okhttp3:logging-interceptor:4.7.2"

    def room_version = "2.2.5"
    implementation "androidx.room:room-runtime:$room_version"
    implementation "androidx.room:room-ktx:$room_version"
    kapt "androidx.room:room-compiler:$room_version"

    implementation "com.google.android.material:material:1.3.0-alpha02"

    implementation "com.google.guava:guava:29.0-android"

    def koin_version = "2.1.5"
    implementation "org.koin:koin-android:$koin_version"
    implementation "org.koin:koin-androidx-viewmodel:$koin_version"

    implementation 'com.google.code.gson:gson:2.8.6'
    implementation 'com.jakewharton.timber:timber:4.7.1'

    def groupie_version = "2.8.0"
    implementation "com.github.lisawray.groupie:groupie:$groupie_version"
    implementation "com.github.lisawray.groupie:groupie-viewbinding:$groupie_version"

    // Kronos ntp clock
    def kronos_latest_version = "0.0.1-alpha09"
    implementation "com.lyft.kronos:kronos-android:$kronos_latest_version"

    //// TEST RELATED DEPENDENCIES
    testImplementation "org.jetbrains.kotlin:kotlin-test-junit5:$kotlin_version"

    // Junit5 for Unit Tests
    testImplementation "org.junit.jupiter:junit-jupiter-api:5.6.2"

    // Junit5 Parameterized tests
    testImplementation "org.junit.jupiter:junit-jupiter-params:5.6.2"

    // Junit5 Run time
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:5.6.2"

    // AssertJ for Assertions
    testImplementation "org.assertj:assertj-core:3.11.1"

    // AndroidX Testing Core library
    androidTestImplementation "androidx.test:core:1.3.0"

    // AndroidJUnitRunner and JUnit Rules
    androidTestImplementation "androidx.test:runner:1.3.0"
    androidTestImplementation "androidx.test:rules:1.3.0"

    // Assertions
    androidTestImplementation "androidx.test.ext:junit:1.1.2"
    androidTestImplementation "androidx.test.ext:truth:1.3.0"
    androidTestImplementation "com.google.truth:truth:1.0.1"

    // Espresso dependencies
    androidTestImplementation "androidx.test.espresso:espresso-core:3.3.0"

    // Fragment testing
    def fragment_testing_version = "1.2.5"
    testImplementation "androidx.fragment:fragment-testing:$fragment_testing_version"

    testImplementation "com.nhaarman.mockitokotlin2:mockito-kotlin:2.2.0"
    testImplementation "io.mockk:mockk:1.10.0"
    // Koin
    testImplementation "org.koin:koin-test:$koin_version"
}

apply plugin: 'com.google.gms.google-services'